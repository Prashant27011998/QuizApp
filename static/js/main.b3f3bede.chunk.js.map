{"version":3,"sources":["Components/style.module.css","logo.svg","Components/app-style.module.css","Components/ChildComponent.js","Components/ImageUploader.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","questions","question","options","answer","i","ChildComponent","props","handler","event","target","value","state","count","setState","previous","totalscore","console","log","length","ques","ans","map","answers","index","className","styles","btn","button","onClick","message","name","bind","adjust","this","Component","ImageUploader","handleusername","username","handlepassword","event1","password","submitHandler","user","pass","status","display","preventDefault","class","temp","head","style","onSubmit","inputs","id","type","onChange","break","passtxt","sub","vl","vls","cent","vlk","vlst","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.b3f3bede.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputs\":\"style_inputs__-nGEy\",\"adjust\":\"style_adjust__3R_sT\",\"button\":\"style_button__Um9Bf\",\"btn\":\"style_btn__3tFiK\",\"cent\":\"style_cent___CaDB\",\"vl\":\"style_vl__2NJeC\",\"vls\":\"style_vls__3O0cR\",\"vlk\":\"style_vlk__1VZnh\",\"vlst\":\"style_vlst__1AKeQ\",\"head\":\"style_head__10pNX\",\"break\":\"style_break__1OSYz\",\"sub\":\"style_sub__3TR5E\",\"username\":\"style_username__1YMTZ\",\"password\":\"style_password__2zTJe\",\"temp\":\"style_temp__2p8s0\",\"pass\":\"style_pass__3mp_0\"};","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"app-style_form__27OX-\",\"submit\":\"app-style_submit__3MMOH\",\"pad\":\"app-style_pad__3GCdK\",\"spanpad\":\"app-style_spanpad__HXPQt\",\"sumpad\":\"app-style_sumpad__e4JEU\",\"cc\":\"app-style_cc__3qT2u\"};","import React, { Component } from 'react'\r\nimport styles from \"./style.module.css\"\r\nimport ImageUploader from \"./ImageUploader\"\r\nconst questions=[\r\n    {\r\n        question:\"Areas of which of the following current states did not come under control of Vijayanagar emperor Krishnadeva Raya?\" ,\r\n        options:[\"Tamil Nadu\",\"Odisha\",\"Maharastra\"] ,\r\n        answer:\"Maharastra\"\r\n\r\n    },\r\n    {\r\n        question:\" Which language is spoken in Karnataka?\" ,\r\n        options:[\"Kannada\",\"Hindi\",\"Marathi\"] ,\r\n        answer:\"Kannada\"\r\n\r\n\r\n    },\r\n    {\r\n        question:\"Ball pen function on which one of the following principal?\" ,\r\n        options:[\"Surface Tension\",\"Viscosity\",\"Boyles Law\"] ,\r\n        answer:\"Surface Tension\"\r\n\r\n\r\n    },\r\n    {\r\n        question:\"Which state has the largest number of sugar mills in India?\" ,\r\n        options: [\"Bihar\",\"Punjab\",\"Uttar Pradesh\"] ,\r\n        answer:\"Uttar Pradesh\"\r\n\r\n\r\n    },\r\n    {\r\n        question:\"Which of the following countries is not a part of Melanesia region in the pacific ocean?\" ,\r\n        options:[\"Solomon Islands \",\"Kiribati\",\"Fiji\"] ,\r\n        answer:\"Kiribati\"\r\n\r\n\r\n    }\r\n]\r\nvar i=0\r\nexport class ChildComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             ques:questions[0].question,\r\n             ans:[questions[0].options.map((answers,index)=><div className={styles.btn}><button className={styles.button} onClick={this.handler} value={answers}>{answers}</button></div>)],\r\n             count:0,\r\n             totalscore:0,\r\n             message:\"\"\r\n        }\r\n   \r\n        this.handler=this.handler.bind(this)\r\n    }\r\n    handler = event => {\r\n        if (event.target.value===questions[this.state.count].answer){\r\n            this.setState(previous => ({\r\n                totalscore:previous.totalscore + 1\r\n            }))\r\n            \r\n            \r\n        }\r\n        console.log(event.target.value)\r\n        this.setState(previous=>({\r\n            count:previous.count+1,})\r\n        )\r\n        if (this.state.count<questions.length-1 ){\r\n        this.setState(previous=>({\r\n            ques:questions[this.state.count+1].question,\r\n            ans:[questions[this.state.count+1].options.map((answers,index)=><div className={styles.btn}><button className={styles.button} onClick={this.handler} value={answers}>{answers}</button></div>)]\r\n        }))}\r\n        console.log(event.target.value);\r\n        if (this.state.count>=questions.length-1){\r\n            if (event.target.value===questions[questions.length-1].answer){\r\n                i=1\r\n                }\r\n            \r\n            this.setState({\r\n            message:<div>GAME OVER<br></br><div>Total Score:{this.state.totalscore+i}</div><p>Well tried {this.props.name}</p></div>,\r\n                ques:\"\",\r\n                ans:\"\"\r\n                \r\n            })\r\n        }\r\n        \r\n        \r\n        \r\n        \r\n    }\r\n        \r\n    \r\n\r\n    \r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className={styles.adjust}>\r\n                <h2>&nbsp;&nbsp;&nbsp;</h2>\r\n                <div >{this.state.ques}</div><br></br>\r\n                <div>{this.state.ans}</div>\r\n                {this.state.message}\r\n            </div>\r\n                <div></div>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default ChildComponent\r\n","import React, { Component } from 'react'\r\nimport styles from \"./style.module.css\"\r\nimport ChildComponent from \"./ChildComponent\"\r\nimport App from \"../App\"\r\nconst person=[{\r\n    id:1,\r\n    username:\"Prashant\",\r\n    password:\"hello-world\"\r\n},{\r\n    id:2,\r\n    username:\"mahesh\",\r\n    password:\"react\"\r\n}\r\n]\r\nvar i=0\r\n\r\nclass ImageUploader extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             username:\"\",\r\n             password:\"\",\r\n             message: <div class={styles.temp}><p>Let's Play Quiz</p><p>Fill The Details Above</p></div>,\r\n             status:{display:\"block\"}\r\n        }\r\n        this.handlepassword=this.handlepassword.bind(this)\r\n        this.handleusername=this.handleusername.bind(this)\r\n    }\r\n    \r\n    \r\n    handleusername = event => {\r\n        this.setState({\r\n            username:event.target.value\r\n        })\r\n        }\r\n\r\n    handlepassword = event1 => {\r\n        this.setState({\r\n            password:event1.target.value\r\n        })\r\n    }\r\n    submitHandler=(event)=>{\r\n        \r\n        var count=0\r\n        var user=this.state.username\r\n        var pass=this.state.password\r\n        console.log(user)\r\n        console.log(pass)\r\n        for(i=0;i<2;i++){\r\n            if ((user===\"\" || pass===\"\")) {\r\n                count=1\r\n                break\r\n            }\r\n        }\r\n        if(count===1){\r\n            this.setState({\r\n                message:\"Reload and Fill properly\",\r\n                status:{display:\"none\"}\r\n                \r\n                \r\n            })\r\n        \r\n        }\r\n        else{\r\n            \r\n            this.setState({\r\n                message:<div><div></div>{<ChildComponent name={this.state.username}/>}</div>,\r\n                status:{display:\"none\"}\r\n                \r\n                \r\n            })\r\n\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            \r\n            <div  >\r\n              <div className={styles.head}>\r\n              <h1 className={styles}>QUIZBUZZ</h1>  \r\n            <form style={this.state.status} onSubmit={this.submitHandler}>\r\n                <div className={styles.inputs}>\r\n                <span>Username:</span> <input id={styles.username} type=\"text\" value={this.state.username} onChange={this.handleusername}></input>\r\n                &nbsp;\r\n                <div class={styles.break}></div>\r\n                <span className={styles.passtxt}>Phone No.</span> <input id={styles.password}  type=\"number\" className={styles.pass} value={this.state.password} onChange={this.handlepassword}></input>\r\n                &nbsp;\r\n                <button className={styles.sub}>Enter</button>\r\n                </div>\r\n              \r\n            </form>\r\n            \r\n            </div>\r\n          <div className={styles.vl}></div>\r\n          <div className={styles.vls}></div>\r\n          < div className={styles.cent}>{this.state.message}</div>\r\n          <div className={styles.vlk}></div>\r\n          <div className={styles.vlst}></div>\r\n          </div>\r\n            \r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default ImageUploader\r\n","import React,{Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n\nimport styles from \"./Components/app-style.module.css\"\nimport ImageUploader from \"./Components/ImageUploader\"\n\nclass App extends Component{\n  \n  render(){\n      \n          return(\n          <div className=\"App\">\n            <ImageUploader />\n            \n          </div>\n          )\n          \n      \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}